def compare_name_first(xrp_long: pd.DataFrame, mast_long: pd.DataFrame, trim_key=False) -> Tuple[pd.DataFrame, pd.DataFrame]:
    mismatch_rows = []
    case_rows = []
    def build_dict(df_):
        out = {}
        for (dim, nm), grp in df_.groupby(["Dimension", "Name"]):
            rec = {}
            for _, row in grp.iterrows():
                # Convert all values to strings to ensure consistent comparison
                val = row["Value"]
                if pd.notna(val):
                    rec[row["Attribute"]] = str(val).strip()
                else:
                    rec[row["Attribute"]] = ""
            out[(dim, nm)] = rec
        return out
    
    # Build dictionaries with string values for both XRP and Master
    e_dict = build_dict(xrp_long)
    m_dict = build_dict(mast_long)
    
    all_dn = set(e_dict.keys()) | set(m_dict.keys())
    for dn in all_dn:
        dim, nm = dn
        e_map = e_dict.get(dn, {})
        m_map = m_dict.get(dn, {})
        name_issue = False
        
        # Handle cases where records exist in only one system
        if dn not in e_dict and dn in m_dict:
            m_name = m_map.get("Name", "")
            row = {"Dimension": dim, "Name": nm, "Attribute": "Name", "Master": m_name, "XRP": "",
                   "Comments_1": "", "Comments_2": "", "Status": "Missing in XRP"}
            raw_key = f"{dim}|{nm}|Name|{m_name}|".upper()
            if trim_key:
                raw_key = raw_key.replace(" ", "")
            row["Key"] = raw_key
            mismatch_rows.append(row)
            name_issue = True
        elif dn in e_dict and dn not in m_dict:
            e_name = e_map.get("Name", "")
            row = {"Dimension": dim, "Name": nm, "Attribute": "Name", "Master": "", "XRP": e_name,
                   "Comments_1": "", "Comments_2": "", "Status": "Missing in Master"}
            raw_key = f"{dim}|{nm}|Name||{e_name}".upper()
            if trim_key:
                raw_key = raw_key.replace(" ", "")
            row["Key"] = raw_key
            mismatch_rows.append(row)
            name_issue = True
        elif "Name" in e_map and "Name" in m_map:
            e_name = e_map["Name"]
            m_name = m_map["Name"]
            
            # Simple string equality (case insensitive)
            if e_name.lower() == m_name.lower():
                # Names match exactly or differ only in case
                if e_name != m_name:
                    # Case difference only
                    row = {"Dimension": dim, "Name": nm, "Attribute": "Name", "Master": m_name, "XRP": e_name,
                           "Comments_1": "", "Comments_2": "", "Status": "CASE"}
                    raw_key = f"{dim}|{nm}|Name|{m_name}|{e_name}".upper()
                    if trim_key:
                        raw_key = raw_key.replace(" ", "")
                    row["Key"] = raw_key
                    case_rows.append(row)
                    name_issue = True
            else:
                # Real difference in name values
                row = {"Dimension": dim, "Name": nm, "Attribute": "Name", "Master": m_name, "XRP": e_name,
                       "Comments_1": "", "Comments_2": "", "Status": "Difference in both"}
                raw_key = f"{dim}|{nm}|Name|{m_name}|{e_name}".upper()
                if trim_key:
                    raw_key = raw_key.replace(" ", "")
                row["Key"] = raw_key
                mismatch_rows.append(row)
                name_issue = True
        elif "Name" not in e_map and "Name" in m_map:
            m_name = m_map["Name"]
            row = {"Dimension": dim, "Name": nm, "Attribute": "Name", "Master": m_name, "XRP": "",
                   "Comments_1": "", "Comments_2": "", "Status": "Missing in XRP"}
            raw_key = f"{dim}|{nm}|Name|{m_name}|".upper()
            if trim_key:
                raw_key = raw_key.replace(" ", "")
            row["Key"] = raw_key
            mismatch_rows.append(row)
            name_issue = True
        elif "Name" in e_map and "Name" not in m_map:
            e_name = e_map["Name"]
            row = {"Dimension": dim, "Name": nm, "Attribute": "Name", "Master": "", "XRP": e_name,
                   "Comments_1": "", "Comments_2": "", "Status": "Missing in Master"}
            raw_key = f"{dim}|{nm}|Name||{e_name}".upper()
            if trim_key:
                raw_key = raw_key.replace(" ", "")
            row["Key"] = raw_key
            mismatch_rows.append(row)
            name_issue = True
            
        # Skip attributes if name issue exists and one system is missing the record
        if name_issue and (dn not in e_dict or dn not in m_dict):
            continue
            
        # Compare attributes
        all_atts = set(e_map.keys()) | set(m_map.keys())
        all_atts.discard("Name")
        for at in all_atts:
            ev = e_map.get(at, "")
            mv = m_map.get(at, "")
            
            # Simple string comparison (since we've already converted everything to strings)
            if ev.lower() == mv.lower():
                # Values are same or differ only in case
                if ev != mv and ev and mv:
                    # Case difference only
                    row = {"Dimension": dim, "Name": nm, "Attribute": at, "Master": mv, "XRP": ev,
                           "Comments_1": "", "Comments_2": "", "Status": "CASE"}
                    raw_key = f"{dim}|{nm}|{at}|{mv}|{ev}".upper()
                    if trim_key:
                        raw_key = raw_key.replace(" ", "")
                    row["Key"] = raw_key
                    case_rows.append(row)
            else:
                # Real difference
                if ev and not mv:
                    st = "Missing in Master"
                    ms = ""
                    es = ev
                elif mv and not ev:
                    st = "Missing in XRP"
                    ms = mv
                    es = ""
                else:
                    st = "Difference in both"
                    ms = mv
                    es = ev
                    
                row = {"Dimension": dim, "Name": nm, "Attribute": at, "Master": ms, "XRP": es,
                       "Comments_1": "", "Comments_2": "", "Status": st}
                raw_key = f"{dim}|{nm}|{at}|{ms}|{es}".upper()
                if trim_key:
                    raw_key = raw_key.replace(" ", "")
                row["Key"] = raw_key
                mismatch_rows.append(row)
                
    c_ = ["Key", "Dimension", "Name", "Attribute", "Master", "XRP", "Comments_1", "Comments_2", "Status"]
    mismatch_df = pd.DataFrame(mismatch_rows, columns=c_) if mismatch_rows else pd.DataFrame(columns=c_)
    case_df = pd.DataFrame(case_rows, columns=c_) if case_rows else pd.DataFrame(columns=c_)
    return mismatch_df, case_df
